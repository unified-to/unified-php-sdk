<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Unified\Unified_to\Models\Shared;


class GenaiEmbedding
{
    /**
     * $content
     *
     * @var ?array<GenaiEmbeddingContent> $content
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('content')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Unified\Unified_to\Models\Shared\GenaiEmbeddingContent>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $content = null;

    /**
     *
     * @var ?float $dimension
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('dimension')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $dimension = null;

    /**
     *
     * @var ?string $embeddings
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('embeddings')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $embeddings = null;

    /**
     *
     * @var ?EncondingFormat $encondingFormat
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('enconding_format')]
    #[\Speakeasy\Serializer\Annotation\Type('\Unified\Unified_to\Models\Shared\EncondingFormat|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?EncondingFormat $encondingFormat = null;

    /**
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     *
     * @var ?float $maxTokens
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('max_tokens')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $maxTokens = null;

    /**
     *
     * @var ?string $modelId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('model_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $modelId = null;

    /**
     * $raw
     *
     * @var ?array<string, mixed> $raw
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('raw')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $raw = null;

    /**
     *
     * @var ?float $tokensUsed
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tokens_used')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $tokensUsed = null;

    /**
     *
     * @var ?string $type
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('type')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  ?array<GenaiEmbeddingContent>  $content
     * @param  ?float  $dimension
     * @param  ?string  $embeddings
     * @param  ?EncondingFormat  $encondingFormat
     * @param  ?string  $id
     * @param  ?float  $maxTokens
     * @param  ?string  $modelId
     * @param  ?array<string, mixed>  $raw
     * @param  ?float  $tokensUsed
     * @param  ?string  $type
     * @phpstan-pure
     */
    public function __construct(?array $content = null, ?float $dimension = null, ?string $embeddings = null, ?EncondingFormat $encondingFormat = null, ?string $id = null, ?float $maxTokens = null, ?string $modelId = null, ?array $raw = null, ?float $tokensUsed = null, ?string $type = null)
    {
        $this->content = $content;
        $this->dimension = $dimension;
        $this->embeddings = $embeddings;
        $this->encondingFormat = $encondingFormat;
        $this->id = $id;
        $this->maxTokens = $maxTokens;
        $this->modelId = $modelId;
        $this->raw = $raw;
        $this->tokensUsed = $tokensUsed;
        $this->type = $type;
    }
}